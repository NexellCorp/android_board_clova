diff --git cmds/bootanimation/BootAnimation.cpp cmds/bootanimation/BootAnimation.cpp
index 10fabcf..411c339 100644
--- cmds/bootanimation/BootAnimation.cpp
+++ cmds/bootanimation/BootAnimation.cpp
@@ -274,6 +274,22 @@ status_t BootAnimation::readyToRun() {
 
     SurfaceComposerClient::openGlobalTransaction();
     control->setLayer(0x40000000);
+	control->setSize(dinfo.h, dinfo.w);
+	control->setPosition(0, 0);
+
+	Rect layer_rect;
+	Rect disp_rect;
+	layer_rect.left=0;
+	layer_rect.top=0;
+	layer_rect.right=dinfo.h;
+	layer_rect.bottom=dinfo.w;
+	disp_rect.left=0;
+	disp_rect.top=0;
+	disp_rect.right=dinfo.h;
+	disp_rect.bottom=dinfo.w;
+
+	mSession->setDisplayProjection(dtoken, 1, layer_rect, disp_rect);
+
     SurfaceComposerClient::closeGlobalTransaction();
 
     sp<Surface> s = control->getSurface();
diff --git media/java/android/media/AudioAttributes.java media/java/android/media/AudioAttributes.java
index 89709ee..bc1dae8 100644
--- media/java/android/media/AudioAttributes.java
+++ media/java/android/media/AudioAttributes.java
@@ -654,6 +654,7 @@ public final class AudioAttributes implements Parcelable {
                 case MediaRecorder.AudioSource.VOICE_RECOGNITION:
                 case MediaRecorder.AudioSource.VOICE_COMMUNICATION:
                 case MediaRecorder.AudioSource.UNPROCESSED:
+                case MediaRecorder.AudioSource.VOICE_CALL:
                     mSource = preset;
                     break;
                 default:
diff --git services/core/java/com/android/server/audio/AudioService.java services/core/java/com/android/server/audio/AudioService.java
index c70a87c..d52b410 100644
--- services/core/java/com/android/server/audio/AudioService.java
+++ services/core/java/com/android/server/audio/AudioService.java
@@ -614,8 +614,42 @@ public class AudioService extends IAudioService.Stub {
         Vibrator vibrator = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);
         mHasVibrator = vibrator == null ? false : vibrator.hasVibrator();
 
-        // Initialize volume
-        int maxVolume = SystemProperties.getInt("ro.config.vc_call_vol_steps",
+       // Initialize volume
+		int defaultMaxVolume = SystemProperties.getInt("ro.config.default_vol_steps",0);
+		if (defaultMaxVolume != 0) {
+
+			MAX_STREAM_VOLUME[AudioSystem.STREAM_VOICE_CALL] = defaultMaxVolume;
+            AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_VOICE_CALL] = (defaultMaxVolume * 3) / 4;
+
+			MAX_STREAM_VOLUME[AudioSystem.STREAM_SYSTEM] = defaultMaxVolume;
+            AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_SYSTEM] = (defaultMaxVolume * 3) / 4;
+
+			MAX_STREAM_VOLUME[AudioSystem.STREAM_RING] = defaultMaxVolume;
+            AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_RING] = (defaultMaxVolume * 3) / 4;
+
+			MAX_STREAM_VOLUME[AudioSystem.STREAM_MUSIC] = defaultMaxVolume;
+            AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_MUSIC] = (defaultMaxVolume * 3) / 4;
+
+			MAX_STREAM_VOLUME[AudioSystem.STREAM_ALARM] = defaultMaxVolume;
+            AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_ALARM] = (defaultMaxVolume * 3) / 4;
+
+			MAX_STREAM_VOLUME[AudioSystem.STREAM_NOTIFICATION] = defaultMaxVolume;
+            AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_NOTIFICATION] = (defaultMaxVolume * 3) / 4;
+
+			MAX_STREAM_VOLUME[AudioSystem.STREAM_BLUETOOTH_SCO] = defaultMaxVolume;
+            AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_BLUETOOTH_SCO] = (defaultMaxVolume * 3) / 4;
+
+			MAX_STREAM_VOLUME[AudioSystem.STREAM_SYSTEM_ENFORCED] = defaultMaxVolume;
+            AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_SYSTEM_ENFORCED] = (defaultMaxVolume * 3) / 4;
+
+			MAX_STREAM_VOLUME[AudioSystem.STREAM_DTMF] = defaultMaxVolume;
+            AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_DTMF] = (defaultMaxVolume * 3) / 4;
+
+			MAX_STREAM_VOLUME[AudioSystem.STREAM_TTS] = defaultMaxVolume;
+            AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_TTS] = (defaultMaxVolume * 3) / 4;
+
+		}
+		int maxVolume = SystemProperties.getInt("ro.config.vc_call_vol_steps",
                 MAX_STREAM_VOLUME[AudioSystem.STREAM_VOICE_CALL]);
         if (maxVolume != MAX_STREAM_VOLUME[AudioSystem.STREAM_VOICE_CALL]) {
             MAX_STREAM_VOLUME[AudioSystem.STREAM_VOICE_CALL] = maxVolume;
diff --git services/core/java/com/android/server/policy/PhoneWindowManager.java services/core/java/com/android/server/policy/PhoneWindowManager.java
index 889c52a..af02afe 100644
--- services/core/java/com/android/server/policy/PhoneWindowManager.java
+++ services/core/java/com/android/server/policy/PhoneWindowManager.java
@@ -443,6 +443,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     IUiModeManager mUiModeManager;
     int mUiMode;
     int mDockMode = Intent.EXTRA_DOCK_STATE_UNDOCKED;
+	int mDefaultOrientation = Surface.ROTATION_0;
     int mLidOpenRotation;
     int mCarDockRotation;
     int mDeskDockRotation;
@@ -1356,7 +1357,9 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     }
 
     private void powerLongPress() {
+
         final int behavior = getResolvedLongPressOnPowerBehavior();
+
         switch (behavior) {
         case LONG_PRESS_POWER_NOTHING:
             break;
@@ -1375,6 +1378,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             mWindowManagerFuncs.shutdown(behavior == LONG_PRESS_POWER_SHUT_OFF);
             break;
         }
+
     }
 
     private void backLongPress() {
@@ -1715,6 +1719,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         mPowerKeyWakeLock = mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,
                 "PhoneWindowManager.mPowerKeyWakeLock");
         mEnableShiftMenuBugReports = "1".equals(SystemProperties.get("ro.debuggable"));
+		mDefaultOrientation = Integer.parseInt(SystemProperties.get("ro.orientation","0"));
         mSupportAutoRotation = mContext.getResources().getBoolean(
                 com.android.internal.R.bool.config_supportAutoRotation);
         mLidOpenRotation = readRotation(
@@ -1785,6 +1790,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         mAccessibilityManager = (AccessibilityManager) context.getSystemService(
                 Context.ACCESSIBILITY_SERVICE);
 
+
         // register for dock events
         IntentFilter filter = new IntentFilter();
         filter.addAction(UiModeManager.ACTION_ENTER_CAR_MODE);
@@ -6354,7 +6360,6 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             }
         }
     };
-
     private final Runnable mHiddenNavPanic = new Runnable() {
         @Override
         public void run() {
@@ -6797,12 +6802,10 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                             ? "USER_ROTATION_LOCKED" : "")
                         );
         }
-
-        if (mForceDefaultOrientation) {
-            return Surface.ROTATION_0;
-        }
-
-        synchronized (mLock) {
+		if (mForceDefaultOrientation) {
+			return mDefaultOrientation;
+		}
+		synchronized (mLock) {
             int sensorRotation = mOrientationListener.getProposedRotation(); // may be -1
             if (sensorRotation < 0) {
                 sensorRotation = lastRotation;
@@ -6947,7 +6950,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                     if (preferredRotation >= 0) {
                         return preferredRotation;
                     }
-                    return Surface.ROTATION_0;
+					return mDefaultOrientation;
             }
         }
     }
diff --git services/core/java/com/android/server/wm/WindowManagerService.java services/core/java/com/android/server/wm/WindowManagerService.java
index 0d97059..f552008 100644
--- services/core/java/com/android/server/wm/WindowManagerService.java
+++ services/core/java/com/android/server/wm/WindowManagerService.java
@@ -552,7 +552,7 @@ public class WindowManagerService extends IWindowManager.Stub
     /** All DisplayContents in the world, kept here */
     SparseArray<DisplayContent> mDisplayContents = new SparseArray<>(2);
 
-    int mRotation = 0;
+    int mRotation = 1;
     int mLastOrientation = ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED;
     boolean mAltOrientation = false;
 
