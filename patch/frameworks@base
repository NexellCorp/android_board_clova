diff --git services/core/java/com/android/server/policy/PhoneWindowManager.java services/core/java/com/android/server/policy/PhoneWindowManager.java
index 889c52a..17761eb 100644
--- services/core/java/com/android/server/policy/PhoneWindowManager.java
+++ services/core/java/com/android/server/policy/PhoneWindowManager.java
@@ -443,6 +443,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     IUiModeManager mUiModeManager;
     int mUiMode;
     int mDockMode = Intent.EXTRA_DOCK_STATE_UNDOCKED;
+	int mDefaultOrientation = Surface.ROTATION_0;
     int mLidOpenRotation;
     int mCarDockRotation;
     int mDeskDockRotation;
@@ -1715,6 +1716,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         mPowerKeyWakeLock = mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,
                 "PhoneWindowManager.mPowerKeyWakeLock");
         mEnableShiftMenuBugReports = "1".equals(SystemProperties.get("ro.debuggable"));
+		mDefaultOrientation = Integer.parseInt(SystemProperties.get("ro.orientation","0"));
         mSupportAutoRotation = mContext.getResources().getBoolean(
                 com.android.internal.R.bool.config_supportAutoRotation);
         mLidOpenRotation = readRotation(
@@ -6797,12 +6799,10 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                             ? "USER_ROTATION_LOCKED" : "")
                         );
         }
-
-        if (mForceDefaultOrientation) {
-            return Surface.ROTATION_0;
+		if (mForceDefaultOrientation) {
+            return mDefaultOrientation;
         }
-
-        synchronized (mLock) {
+		synchronized (mLock) {
             int sensorRotation = mOrientationListener.getProposedRotation(); // may be -1
             if (sensorRotation < 0) {
                 sensorRotation = lastRotation;
@@ -6947,7 +6947,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                     if (preferredRotation >= 0) {
                         return preferredRotation;
                     }
-                    return Surface.ROTATION_0;
+					return mDefaultOrientation;
             }
         }
     }
